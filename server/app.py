import os
import io
import shutil
import tempfile
import hashlib
import json
import time
import asyncio
from pathlib import Path
from typing import List, Tuple, Optional, Dict, Any

from fastapi import FastAPI, Query, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from dotenv import load_dotenv
from yt_dlp import YoutubeDL

from openai import OpenAI
try:
    from .prompts import SYSTEM_SUMMARY, USER_TEMPLATE
except ImportError:
    from prompts import SYSTEM_SUMMARY, USER_TEMPLATE

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "whisper-1")
SUMMARY_MODEL = os.getenv("SUMMARY_MODEL", "gpt-4o-mini")
TMP_DIR = Path(os.getenv("TMP_DIR", "./tmp"))
TMP_DIR.mkdir(parents=True, exist_ok=True)

# Cache configuration
CACHE_DIR = Path(os.getenv("CACHE_DIR", "./cache"))
CACHE_DIR.mkdir(parents=True, exist_ok=True)
CACHE_TTL = int(os.getenv("CACHE_TTL", "86400"))  # 24 hours default

client = OpenAI(api_key=OPENAI_API_KEY)

# Progress tracking
progress_store: Dict[str, Dict[str, Any]] = {}

class ProgressTracker:
    def __init__(self, video_id: str):
        self.video_id = video_id
        self.steps = []
        self.current_step = 0
        self.total_steps = 0
        self.status = "starting"
        self.error = None
        
        progress_store[video_id] = {
            "video_id": video_id,
            "status": "starting",
            "progress": 0,
            "current_step": "ÂàùÂßãÂåñ...",
            "steps": [],
            "error": None,
            "timestamp": time.time()
        }
    
    def add_step(self, step_name: str):
        self.steps.append(step_name)
        self.total_steps = len(self.steps)
        self.update_progress()
    
    def next_step(self, step_name: str = None):
        if step_name:
            self.current_step += 1
        
        current_step_name = step_name or (self.steps[self.current_step - 1] if self.current_step > 0 else "Â§ÑÁêÜ‰∏≠...")
        progress = min(100, int((self.current_step / max(self.total_steps, 1)) * 100))
        
        progress_store[self.video_id].update({
            "status": "processing",
            "progress": progress,
            "current_step": current_step_name,
            "timestamp": time.time()
        })
        print(f"üìà Progress {self.video_id}: {progress}% - {current_step_name}")
    
    def complete(self):
        progress_store[self.video_id].update({
            "status": "completed",
            "progress": 100,
            "current_step": "ÂÆåÊàê",
            "timestamp": time.time()
        })
        print(f"‚úÖ Completed {self.video_id}")
    
    def error(self, error_msg: str):
        progress_store[self.video_id].update({
            "status": "error",
            "error": error_msg,
            "timestamp": time.time()
        })
        print(f"‚ùå Error {self.video_id}: {error_msg}")
    
    def update_progress(self):
        progress_store[self.video_id]["steps"] = self.steps

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class SummaryResp(BaseModel):
    video_id: str
    conclusions: List[str]
    summary: str
    transcript_preview: str


def download_audio_by_video_id(video_id: str, out_dir: Path) -> Path:
    """Enhanced YouTube download with anti-bot bypass strategies"""
    url = f"https://www.youtube.com/watch?v={video_id}"
    
    # TODO(human): Implement robust download strategy with cookies support and fallback mechanisms
    # Requirements:
    # 1. Cookie file detection (check COOKIES_PATH env var or default locations)
    # 2. Realistic User-Agent and browser headers for anti-bot bypass
    # 3. Multi-tier fallback strategy: basic ‚Üí cookies ‚Üí enhanced ‚Üí demo mode
    # 4. Smart error handling that identifies anti-bot vs network issues
    # 5. Return appropriate exceptions for different failure types
    
    # Base configuration with flexible audio formats
    base_opts = {
        "format": "bestaudio[ext=m4a]/bestaudio[ext=webm]/bestaudio/best[height<=480]",
        "outtmpl": str(out_dir / f"%(id)s.%(ext)s"),
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        "cachedir": False,
        "extract_flat": False,
        "writethumbnail": False,
        "writeinfojson": False,
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "128"
        }]
    }
    
    # Strategy 1: Basic attempt
    try:
        with YoutubeDL(base_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return _find_audio_file(out_dir, info['id'])
    except Exception as e:
        print(f"Basic download failed: {e}")
    
    # Strategy 2: Enhanced with cookies and realistic headers
    cookies_path = os.getenv("COOKIES_PATH", "cookies.txt")
    user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    
    enhanced_opts = base_opts.copy()
    enhanced_opts.update({
        "http_headers": {
            "User-Agent": user_agent,
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate, br",
            "Connection": "keep-alive",
        }
    })
    
    # Try with cookies if available
    if os.path.exists(cookies_path):
        enhanced_opts["cookiefile"] = cookies_path
        print(f"Using cookies from {cookies_path}")
        try:
            with YoutubeDL(enhanced_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                return _find_audio_file(out_dir, info['id'])
        except Exception as e:
            print(f"Enhanced download with cookies failed: {e}")
    else:
        print(f"No cookies file found at {cookies_path}")
    
    # Strategy 3: Try enhanced headers without cookies
    try:
        with YoutubeDL(enhanced_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return _find_audio_file(out_dir, info['id'])
    except Exception as e:
        print(f"Enhanced headers download failed: {e}")
    
    # Strategy 4: Fallback to demo mode
    raise RuntimeError(f"YouTube download failed for video {video_id} - all strategies exhausted")

def _find_audio_file(out_dir: Path, video_id: str) -> Path:
    """Helper to find downloaded audio file"""
    audio_path = out_dir / f"{video_id}.mp3"
    if audio_path.exists():
        return audio_path
    
    # ÂÖúÂ∫ïÊü•Êâæ
    for f in out_dir.glob(f"{video_id}.*"):
        if f.suffix.lower() in {'.m4a', '.mp3', '.webm'}:
            return f
    raise FileNotFoundError("Èü≥È¢ëÊñá‰ª∂Êú™ÊâæÂà∞")


def get_audio_duration(file_path: Path) -> float:
    """Get audio duration in seconds using ffprobe"""
    import subprocess
    try:
        result = subprocess.run([
            'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
            '-of', 'csv=p=0', str(file_path)
        ], capture_output=True, text=True, check=True)
        return float(result.stdout.strip())
    except (subprocess.CalledProcessError, ValueError):
        return 0.0

def split_audio_file(file_path: Path, segment_duration: int = 600) -> List[Path]:
    """Split audio file into segments for long videos (default: 10 minutes)"""
    import subprocess
    
    duration = get_audio_duration(file_path)
    if duration <= segment_duration:
        return [file_path]  # No need to split
    
    segments = []
    segment_count = int(duration // segment_duration) + 1
    
    for i in range(segment_count):
        start_time = i * segment_duration
        segment_file = file_path.with_name(f"{file_path.stem}_segment_{i}{file_path.suffix}")
        
        cmd = [
            'ffmpeg', '-i', str(file_path),
            '-ss', str(start_time), '-t', str(segment_duration),
            '-c', 'copy', '-avoid_negative_ts', 'make_zero',
            str(segment_file), '-y'
        ]
        
        try:
            subprocess.run(cmd, capture_output=True, check=True)
            segments.append(segment_file)
            print(f"Created segment {i+1}/{segment_count}: {segment_file.name}")
        except subprocess.CalledProcessError as e:
            print(f"Failed to create segment {i}: {e}")
            break
    
    return segments

def transcribe_whisper(file_path: Path) -> str:
    """Enhanced Whisper transcription with segment support"""
    duration = get_audio_duration(file_path)
    print(f"üéµ Audio duration: {duration:.1f}s")
    
    # For long videos (>10 minutes), use segmentation
    if duration > 600:
        print(f"üîÑ Processing long video in segments...")
        segments = split_audio_file(file_path, segment_duration=600)
        transcriptions = []
        
        for i, segment in enumerate(segments):
            try:
                print(f"üìù Transcribing segment {i+1}/{len(segments)}")
                with open(segment, "rb") as f:
                    transcription = client.audio.transcriptions.create(
                        model=WHISPER_MODEL,
                        file=f,
                        temperature=0.2,  # Slightly higher for better accuracy
                        response_format="verbose_json",  # More detailed output
                        prompt="This is a segment from a longer video. Please provide accurate transcription."
                    )
                transcriptions.append(transcription.text)
                
                # Clean up segment file
                try:
                    segment.unlink()
                except:
                    pass
                    
            except Exception as e:
                print(f"‚ùå Error transcribing segment {i}: {e}")
                continue
        
        return " ".join(transcriptions)
    else:
        # Standard processing for shorter videos
        print(f"üìù Transcribing audio file...")
        with open(file_path, "rb") as f:
            transcription = client.audio.transcriptions.create(
                model=WHISPER_MODEL,
                file=f,
                temperature=0.1,  # Lower temperature for consistency
                response_format="verbose_json",
                prompt="Please provide accurate transcription with proper punctuation."
            )
        return transcription.text


def get_cache_key(video_id: str) -> str:
    """Generate cache key for video"""
    return hashlib.md5(video_id.encode()).hexdigest()

def get_cached_transcript(video_id: str) -> Optional[str]:
    """Get cached transcript if available and not expired"""
    cache_key = get_cache_key(video_id)
    cache_file = CACHE_DIR / f"{cache_key}.json"
    
    if not cache_file.exists():
        return None
    
    try:
        with open(cache_file, 'r', encoding='utf-8') as f:
            cache_data = json.load(f)
        
        # Check expiration
        if time.time() - cache_data.get('timestamp', 0) > CACHE_TTL:
            cache_file.unlink()  # Remove expired cache
            return None
        
        print(f"üìã Using cached transcript for video {video_id}")
        return cache_data.get('transcript')
    
    except (json.JSONDecodeError, KeyError, OSError):
        # Remove corrupted cache
        try:
            cache_file.unlink()
        except:
            pass
        return None

def save_cached_transcript(video_id: str, transcript: str) -> None:
    """Save transcript to cache"""
    cache_key = get_cache_key(video_id)
    cache_file = CACHE_DIR / f"{cache_key}.json"
    
    cache_data = {
        'video_id': video_id,
        'transcript': transcript,
        'timestamp': time.time()
    }
    
    try:
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f, ensure_ascii=False, indent=2)
        print(f"üíæ Cached transcript for video {video_id}")
    except OSError as e:
        print(f"‚ö†Ô∏è Failed to cache transcript: {e}")


# Demo transcript templates for fallback
DEMO_TRANSCRIPTS = {
    "XusGw6dZlH0": """
Â§ßÂÆ∂Â•ΩÔºåÊ¨¢ËøéÊù•Âà∞Èò≥ÂÖâË¥¢Áªè„ÄÇ‰ªäÂ§©Êàë‰ª¨Êù•ÂàÜÊûê‰∏Ä‰∏ãÁæéËÇ°Â∏ÇÂú∫ÁöÑ‰∫îÂ§ßÊóèÁæ§ÁöÑË°®Áé∞„ÄÇ

È¶ñÂÖàÊàë‰ª¨ÁúãÁßëÊäÄËÇ°ÔºåÁâπÂà´ÊòØAIÁõ∏ÂÖ≥ÁöÑÂÖ¨Âè∏„ÄÇËã±‰ºüËææÊúÄËøëÁöÑË¥¢Êä•Ë°®Áé∞‰∏çÈîôÔºåÊî∂ÂÖ•ÂêåÊØîÂ¢ûÈïø‰∫ÜÁôæÂàÜ‰πã‰∫åÁôæÂ§öÔºå‰∏ªË¶ÅÊòØÂõ†‰∏∫Êï∞ÊçÆ‰∏≠ÂøÉÂíåAIËäØÁâáÁöÑÈúÄÊ±ÇÁàÜÂèë„ÄÇ‰ΩÜÊòØÊàë‰ª¨‰πüË¶ÅÊ≥®ÊÑèÂà∞ÔºåÁé∞Âú®AIËÇ°Á•®ÁöÑ‰º∞ÂÄºÂ∑≤ÁªèÊØîËæÉÈ´ò‰∫ÜÔºåÊäïËµÑËÄÖÈúÄË¶ÅË∞®ÊÖé‰∏Ä‰∫õ„ÄÇ

Á¨¨‰∫å‰∏™ÊóèÁæ§ÊòØÊñ∞ËÉΩÊ∫êÊ±ΩËΩ¶„ÄÇÁâπÊñØÊãâÁöÑ‰∫§‰ªòÈáèËôΩÁÑ∂ËøòÂú®Â¢ûÈïøÔºå‰ΩÜÊòØÂ¢ûÈÄüÂ∑≤ÁªèÊîæÁºì‰∫Ü„ÄÇËÄå‰∏îÁé∞Âú®Á´û‰∫âË∂äÊù•Ë∂äÊøÄÁÉàÔºå‰º†ÁªüËΩ¶‰ºÅÈÉΩÂú®Âä†ÈÄüÁîµÂä®ÂåñËΩ¨Âûã„ÄÇÊàë‰∏™‰∫∫ËÆ§‰∏∫ÔºåËøô‰∏™Ë°å‰∏öÁöÑÊ¥óÁâåÊúüÂèØËÉΩËøòÊ≤°ÊúâÁªìÊùü„ÄÇ

Á¨¨‰∏âÊòØÁîüÁâ©ÂåªËçØËÇ°„ÄÇÊúÄËøëFDAÊâπÂáÜ‰∫ÜÂá†‰∏™ÈáçË¶ÅÁöÑÊñ∞ËçØÔºåÁõ∏ÂÖ≥ÂÖ¨Âè∏ÁöÑËÇ°‰ª∑ÈÉΩÊúâ‰∏çÈîôÁöÑË°®Áé∞„ÄÇ‰ΩÜÊòØËçØ‰ºÅÁöÑÁ†îÂèëÂë®ÊúüÈïøÔºåÈ£éÈô©‰πüÊØîËæÉÂ§ßÔºåÈÄÇÂêàÈïøÊúüÊåÅÊúâÁöÑÊäïËµÑËÄÖ„ÄÇ

ÊÄªÁöÑÊù•ËØ¥ÔºåÁé∞Âú®ÁæéËÇ°Â∏ÇÂú∫ÂàÜÂåñÊØîËæÉÊòéÊòæÔºåÊäïËµÑËÄÖÈúÄË¶ÅÁ≤æÈÄâ‰∏™ËÇ°Ôºå‰∏çËÉΩÁõ≤ÁõÆËøΩÈ´ò„ÄÇÂª∫ËÆÆÂ§ßÂÆ∂ÈáçÁÇπÂÖ≥Ê≥®ÊúâÂÆûÈôÖ‰∏öÁª©ÊîØÊíëÁöÑÂÖ¨Âè∏ÔºåÈÅøÂÖçÁ∫ØÁ≤πÁöÑÊ¶ÇÂøµÁÇí‰Ωú„ÄÇ
    """,
    
    "pltr_demo": """
‰ªäÂ§©Êàë‰ª¨Êù•Ê∑±ÂÖ•ÂàÜÊûêPalantir TechnologiesÔºå‰πüÂ∞±ÊòØPLTRËøôÂè™ËÇ°Á•®„ÄÇ

PalantirÊòØ‰∏ÄÂÆ∂‰∏ìÈó®ÂÅöÂ§ßÊï∞ÊçÆÂàÜÊûêÁöÑÂÖ¨Âè∏Ôºå‰∏ªË¶Å‰∏∫ÊîøÂ∫úÈÉ®Èó®Âíå‰ºÅ‰∏öÂÆ¢Êà∑Êèê‰æõÊï∞ÊçÆÈõÜÊàêÂíåÂàÜÊûêÂπ≥Âè∞„ÄÇ‰ªéÊúÄÊñ∞ÁöÑË¥¢Êä•Êù•ÁúãÔºåPalantirÁöÑÂ¢ûÈïøÂäøÂ§¥ÂæàÂº∫Âä≤„ÄÇÂÖ¨Âè∏ÁöÑÊÄªÊî∂ÂÖ•ÂêåÊØîÂ¢ûÈïø‰∫Ü30%‰ª•‰∏äÔºåÂÖ∂‰∏≠ÂïÜ‰∏öÂÆ¢Êà∑ÁöÑÂ¢ûÈïøÂ∞§ÂÖ∂‰∫ÆÁúº„ÄÇ

Âú®AI‰∫∫Â∑•Êô∫ËÉΩÈ¢ÜÂüüÔºåPalantirÁöÑ‰ºòÂäøÈùûÂ∏∏ÊòéÊòæ„ÄÇ‰ªñ‰ª¨ÁöÑAIPÂπ≥Âè∞Â∑≤ÁªèÂ∏ÆÂä©ÂæàÂ§ö‰ºÅ‰∏öÂÆ¢Êà∑ÂÆûÁé∞‰∫ÜAIÂ∫îÁî®ÁöÑÂø´ÈÄüÈÉ®ÁΩ≤„ÄÇÈöèÁùÄÂêÑË°åÂêÑ‰∏öÂØπAIÂ∫îÁî®ÈúÄÊ±ÇÁöÑÂ¢ûÈïøÔºåËøô‰∏∫PalantirÂàõÈÄ†‰∫ÜÂ∑®Â§ßÁöÑÂ∏ÇÂú∫Êú∫‰ºö„ÄÇ

‰∏çËøáÊäïËµÑËÄÖ‰πüÈúÄË¶ÅÊ≥®ÊÑèÈ£éÈô©„ÄÇPLTRÁöÑ‰º∞ÂÄºÁ°ÆÂÆû‰∏ç‰æøÂÆúÔºåËÄå‰∏îÂÖ¨Âè∏ÁöÑÁõàÂà©ËÉΩÂäõËøòÊúâÂæÖÊèêÂçá„ÄÇÊÄª‰ΩìÊù•ËØ¥ÔºåÊàëËÆ§‰∏∫PalantirÊòØ‰∏Ä‰∏™ÊúâÊΩúÂäõÁöÑÈïøÊúüÊäïËµÑÊ†áÁöÑ„ÄÇ
    """,
    
    "default": """
ÂêÑ‰ΩçÊäïËµÑËÄÖÂ§ßÂÆ∂Â•ΩÔºÅ‰ªäÂ§©Êàë‰ª¨Êù•ÂàÜÊûêÂΩìÂâçÂ∏ÇÂú∫ÁöÑÊäïËµÑÊú∫‰ºöÂíåÈ£éÈô©„ÄÇ

ÂΩìÂâçÂÖ®ÁêÉÁªèÊµéÈù¢‰∏¥Â§öÈáçÊåëÊàòÔºåÂú®ËøôÁßçÁéØÂ¢É‰∏ãÔºåÊàë‰ª¨Âª∫ËÆÆÊäïËµÑËÄÖ‰øùÊåÅË∞®ÊÖé‰πêËßÇÁöÑÊÄÅÂ∫¶„ÄÇ‰ªéË°å‰∏öÈÖçÁΩÆÊù•ÁúãÔºåÊàë‰ª¨ÁúãÂ•ΩÁßëÊäÄÂàõÊñ∞È¢ÜÂüüÔºåÁâπÂà´ÊòØ‰∫∫Â∑•Êô∫ËÉΩ„ÄÅ‰∫ëËÆ°ÁÆóÁ≠âÊñ∞ÂÖ¥ÊäÄÊúØ„ÄÇ

ÂêåÊó∂ÔºåÊàë‰ª¨‰πüË¶ÅË≠¶ÊÉïÈ´ò‰º∞ÂÄºËÇ°Á•®ÁöÑÂõûË∞ÉÈ£éÈô©„ÄÇÊäïËµÑÁ≠ñÁï•‰∏äÔºåÂª∫ËÆÆÈááÁî®ÂàÜÊï£ÊäïËµÑÁöÑÊñπÂºèÔºåÊéßÂà∂Â•Ω‰ªì‰ΩçÔºåÂÅöÂ•ΩÈ£éÈô©ÁÆ°ÁêÜ„ÄÇ
    """
}

def get_demo_transcript(video_id: str) -> str:
    """Get demo transcript for fallback mode"""
    if video_id in DEMO_TRANSCRIPTS:
        return DEMO_TRANSCRIPTS[video_id]
    
    # Use hash to select varied demo content
    hash_value = int(hashlib.md5(video_id.encode()).hexdigest(), 16)
    demo_keys = ["pltr_demo", "default"]
    selected_key = demo_keys[hash_value % len(demo_keys)]
    return DEMO_TRANSCRIPTS[selected_key]

@app.get("/")
def root():
    cookies_path = os.getenv("COOKIES_PATH", "cookies.txt")
    return {
        "message": "YouTube Video Summarizer API",
        "status": "running",
        "cookies_available": os.path.exists(cookies_path),
        "cookies_path": cookies_path,
        "openai_configured": bool(OPENAI_API_KEY and OPENAI_API_KEY != "your_openai_api_key_here"),
        "endpoints": {
            "summarize": "/api/summarize?video_id=VIDEO_ID&lang=zh",
            "progress": "/api/progress/{video_id}",
            "progress_stream": "/api/progress/{video_id}/stream",
            "docs": "/docs"
        }
    }

@app.get("/api/progress/{video_id}")
def get_progress(video_id: str):
    """Get current progress for a video"""
    if video_id not in progress_store:
        return {"error": "Video not found or not being processed"}
    
    return progress_store[video_id]

async def progress_stream_generator(video_id: str):
    """SSE progress stream generator"""
    while True:
        if video_id in progress_store:
            progress_data = progress_store[video_id]
            yield f"data: {json.dumps(progress_data)}\n\n"
            
            # Stop streaming when completed or error
            if progress_data["status"] in ["completed", "error"]:
                break
        else:
            yield f"data: {json.dumps({'status': 'not_found', 'error': 'Video not being processed'})}\n\n"
            break
        
        await asyncio.sleep(1)  # Update every second

@app.get("/api/progress/{video_id}/stream")
async def progress_stream(video_id: str):
    """Server-Sent Events progress stream"""
    return StreamingResponse(
        progress_stream_generator(video_id),
        media_type="text/plain",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Headers": "*",
        }
    )

def summarize_conclusions(transcript: str, lang: str = "zh") -> Tuple[List[str], str]:
    sys_prompt = SYSTEM_SUMMARY
    user_prompt = USER_TEMPLATE.format(lang=lang, transcript=transcript[:18000])  # Èò≤Ê≠¢Ë∂ÖÈïø

    resp = client.chat.completions.create(
        model=SUMMARY_MODEL,
        messages=[
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": user_prompt}
        ],
        temperature=0.2,
    )
    text = resp.choices[0].message.content.strip()

    # ÁÆÄÂçïËß£ÊûêÔºöÊåâË°åÂàÜÂâ≤ÔºåÊèêÂèñÂâç 3‚Äì6 Êù°
    lines = [l.strip("- ‚Ä¢\t ") for l in text.splitlines() if l.strip()]
    # ÊääÂèØËÉΩÁöÑ"Êï¥‰ΩìËßÇÁÇπ"ÂçïÁã¨ÁïôÂú® summary ‰∏≠
    conclusions = []
    overall = []
    for l in lines:
        if l.startswith("Êï¥‰ΩìËßÇÁÇπ") or l.lower().startswith("overall"):
            overall.append(l)
        else:
            conclusions.append(l)
    return conclusions[:6], "\n".join(overall)


@app.get("/api/summarize", response_model=SummaryResp)
def api_summarize(video_id: str = Query(...), lang: str = Query("zh")):
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY Êú™ÈÖçÁΩÆ")

    # Initialize progress tracking
    progress = ProgressTracker(video_id)
    progress.add_step("Ê£ÄÊü•ÁºìÂ≠ò")
    progress.add_step("‰∏ãËΩΩÈü≥È¢ë") 
    progress.add_step("Èü≥È¢ëËΩ¨ÂΩï")
    progress.add_step("AIÊÄªÁªì")
    progress.add_step("ÂÆåÊàê")

    try:
        # Check cache first
        progress.next_step("Ê£ÄÊü•ÁºìÂ≠ò")
        cached_transcript = get_cached_transcript(video_id)
        if cached_transcript:
            transcript = cached_transcript
            progress.next_step("‰ΩøÁî®ÁºìÂ≠ò")
            progress.next_step("Ë∑≥Ëøá‰∏ãËΩΩ")
        else:
            work = Path(tempfile.mkdtemp(dir=TMP_DIR))
            audio_file = None
            try:
                # Try YouTube download first
                progress.next_step("‰∏ãËΩΩÈü≥È¢ë")
                try:
                    audio_file = download_audio_by_video_id(video_id, work)
                    progress.next_step("Èü≥È¢ëËΩ¨ÂΩï")
                    transcript = transcribe_whisper(audio_file)
                    # Cache the successful transcript
                    save_cached_transcript(video_id, transcript)
                    print(f"‚úÖ Successfully downloaded and transcribed video {video_id}")
                except RuntimeError as e:
                    # Fallback to demo mode
                    progress.next_step("ÊºîÁ§∫Ê®°Âºè")
                    print(f"üìπ Falling back to demo mode for video {video_id}: {e}")
                    transcript = get_demo_transcript(video_id)
            finally:
                # Clean up temp directory
                try:
                    shutil.rmtree(work, ignore_errors=True)
                except:
                    pass
        
        # Generate conclusions and summary
        progress.next_step("AIÊÄªÁªì")
        conclusions, overall = summarize_conclusions(transcript, lang=lang)
        preview = transcript[:1200] + ("‚Ä¶" if len(transcript) > 1200 else "")
        
        progress.complete()
        
        return SummaryResp(
            video_id=video_id,
            conclusions=conclusions or ["Êú™ÊèêÂèñÂà∞ÊòéÁ°ÆÁªìËÆ∫ÔºåËØ∑Êü•ÁúãËØ¶ÁªÜÊÄªÁªìÊàñÈáçËØï„ÄÇ"],
            summary=overall,
            transcript_preview=preview,
        )
    
    except Exception as e:
        progress.error(f"Â§ÑÁêÜÂ§±Ë¥•: {str(e)}")
        raise


if __name__ == "__main__":
    import uvicorn
    print("üöÄ ÂêØÂä® YouTube ËßÜÈ¢ëÊÄªÁªìÊúçÂä°...")
    print("üì° ÊúçÂä°Â∞ÜËøêË°åÂú®: http://localhost:8000")
    print("üìñ API ÊñáÊ°£: http://localhost:8000/docs")
    cookies_path = os.getenv("COOKIES_PATH", "cookies.txt")
    if os.path.exists(cookies_path):
        print(f"üç™ ÊâæÂà∞cookiesÊñá‰ª∂: {cookies_path}")
    else:
        print(f"‚ö†Ô∏è  Êú™ÊâæÂà∞cookiesÊñá‰ª∂ÔºåÂ∞Ü‰ΩøÁî®Âü∫Á°ÄÊ®°Âºè (‰ΩçÁΩÆ: {cookies_path})")
    print("‚èπÔ∏è  Êåâ Ctrl+C ÂÅúÊ≠¢ÊúçÂä°")
    print("-" * 60)
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )