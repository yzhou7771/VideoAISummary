const $ = (id) => document.getElementById(id);
let currentMeta = null;
let showAdvanced = false;

console.log('[YT Extension Popup] Starting popup initialization');

// ÊÅ¢Â§çÁî®Êà∑ËÆæÁΩÆÂπ∂ËÆæÁΩÆÈªòËÆ§ÂÄº
chrome.storage.sync.get(['apiBase', 'lang'], (cfg) => {
  $("apiBase").value = cfg.apiBase || 'http://localhost:8000';
  $("lang").value = cfg.lang || 'zh';
  console.log('[YT Extension Popup] Settings restored:', cfg);
});

// ÂèåÂáªËßÜÈ¢ëÁä∂ÊÄÅÂå∫ÂüüÊòæÁ§∫/ÈöêËóèÈ´òÁ∫ßËÆæÁΩÆ
$("videoMeta").addEventListener('dblclick', () => {
  showAdvanced = !showAdvanced;
  $("apiRow").style.display = showAdvanced ? 'flex' : 'none';
  $("langRow").style.display = showAdvanced ? 'flex' : 'none';
  console.log('[YT Extension Popup] Advanced settings:', showAdvanced ? 'shown' : 'hidden');
});

// ÁõëÂê¨ content script ÂèëÈÄÅÁöÑÂÖÉ‰ø°ÊÅØ
chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
  console.log('[YT Extension Popup] Received message:', msg);
  if (msg?.type === 'YT_META') {
    currentMeta = msg.payload;
    console.log('[YT Extension Popup] Updated current meta:', currentMeta);
    renderMeta();
  }
});

function renderMeta() {
  const el = $("videoMeta");
  
  console.log('[YT Extension Popup] Rendering meta:', currentMeta);
  
  if (!currentMeta || !currentMeta.videoId) {
    el.innerHTML = `
      <div style="color: #666; text-align: center; padding: 10px;">
        ‚ö†Ô∏è No video detected<br/>
        <small>Please open a YouTube video page</small>
      </div>
    `;
    $("summarizeBtn").disabled = true;
    return;
  }
  
  $("summarizeBtn").disabled = false;
  el.innerHTML = `
    <div style="color: #333; text-align: center; padding: 8px;">
      <strong>‚úÖ Video Ready</strong>
    </div>
  `;
}

$("summarizeBtn").addEventListener('click', async () => {
  console.log('[YT Extension Popup] Summarize button clicked');
  
  const apiBase = $("apiBase").value.trim() || 'http://localhost:8000';
  const lang = $("lang").value || 'zh';

  console.log('[YT Extension Popup] API Base:', apiBase, 'Language:', lang);
  console.log('[YT Extension Popup] Current Meta:', currentMeta);

  chrome.storage.sync.set({ apiBase, lang });

  if (!currentMeta?.videoId) {
    setStatus('‚ùå Êú™Ê£ÄÊµãÂà∞ËßÜÈ¢ëID - ËØ∑Âà∑Êñ∞YouTubeÈ°µÈù¢ÈáçËØï');
    console.error('[YT Extension Popup] No video ID found');
    return;
  }

  // Check server status first
  setStatus('üîç Ê£ÄÊü•ÊúçÂä°Âô®Áä∂ÊÄÅ...');
  const serverStatus = await checkServerStatus(apiBase);
  if (!serverStatus) {
    setStatus('‚ùå Êó†Ê≥ïËøûÊé•Âà∞ÊúçÂä°Âô®');
    showDetailedError(`ÊúçÂä°Âô®ËøûÊé•Â§±Ë¥•Ôºö
‚Ä¢ ËØ∑Á°ÆËÆ§ÊúçÂä°Âô®ËøêË°åÂú® ${apiBase}
‚Ä¢ Ê£ÄÊü•ÁΩëÁªúËøûÊé•
‚Ä¢ Á°ÆËÆ§ÊúçÂä°Âô®Âú∞ÂùÄÊ≠£Á°Æ`);
    return;
  }

  // Check if cookies are available and warn if not
  if (!serverStatus.cookies_available) {
    const shouldContinue = showCookiesReminder();
    if (!shouldContinue) {
      setStatus('‚è∏Ô∏è Â∑≤ÂèñÊ∂àÊìç‰Ωú');
      return;
    }
  }

  setStatus('üîÑ Ê≠£Âú®ÂàùÂßãÂåñÂ§ÑÁêÜÊµÅÁ®ã...');
  setConclusions([]); 
  $("summary").textContent = ''; 
  $("transcript").textContent = '';
  clearErrorDetails(); // Clear any previous error messages

  const videoId = currentMeta.videoId;
  
  // Start progress monitoring
  startProgressMonitoring(apiBase, videoId);
  
  const requestUrl = `${apiBase}/api/summarize?video_id=${encodeURIComponent(videoId)}&lang=${encodeURIComponent(lang)}`;
  console.log('[YT Extension Popup] Making request to:', requestUrl);

  try {
    const res = await fetch(requestUrl);
    console.log('[YT Extension Popup] Response status:', res.status);
    
    if (!res.ok) {
      throw new Error(`HTTP ${res.status} - ${res.statusText}`);
    }
    
    const data = await res.json();
    console.log('[YT Extension Popup] Response data:', data);

    setConclusions(data?.conclusions || ['Êú™Ëé∑ÂèñÂà∞ÁªìËÆ∫']);
    $("summary").textContent = data?.summary || 'Êú™Ëé∑ÂèñÂà∞ÊÄªÁªì';
    $("transcript").textContent = data?.transcript_preview || 'Êú™Ëé∑ÂèñÂà∞ËΩ¨ÂΩïÈ¢ÑËßà';
    setStatus('‚úÖ ÂÆåÊàê');
  } catch (err) {
    console.error('[YT Extension Popup] Request failed:', err);
    
    // Êèê‰æõÊõ¥ÂèãÂ•ΩÁöÑÈîôËØØ‰ø°ÊÅØ
    if (err.message.includes('Failed to fetch')) {
      setStatus('‚ùå Êó†Ê≥ïËøûÊé•Âà∞ÂêéÁ´ØÊúçÂä°');
      showDetailedError(`ËØ∑Á°ÆËÆ§‰ª•‰∏ã‰∫ãÈ°πÔºö
‚Ä¢ ÂêéÁ´ØÊúçÂä°Ê≠£Âú®ËøêË°åÂú® ${apiBase}
‚Ä¢ ÁΩëÁªúËøûÊé•Ê≠£Â∏∏
‚Ä¢ ÊúçÂä°Âô®Âú∞ÂùÄËÆæÁΩÆÊ≠£Á°Æ`);
    } else if (err.message.includes('NetworkError')) {
      setStatus('‚ùå ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò');
      showDetailedError('ËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÊàñÁ®çÂêéÈáçËØï');
    } else if (err.message.includes('HTTP 401') || err.message.includes('Unauthorized')) {
      setStatus('‚ùå YouTubeËÆøÈóÆÂèóÈôê');
      showDetailedError(`ÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÔºö
‚Ä¢ YouTube cookiesÂèØËÉΩÂ∑≤ËøáÊúü
‚Ä¢ ËØ∑Â∞ùËØïÈáçÊñ∞ÁôªÂΩïYouTube
‚Ä¢ Ê£ÄÊü•ÊúçÂä°Âô®cookies.txtÊñá‰ª∂`);
    } else if (err.message.includes('HTTP 429')) {
      setStatus('‚ùå ËØ∑Ê±ÇËøá‰∫éÈ¢ëÁπÅ');
      showDetailedError('ËØ∑Á®çÁ≠âÁâáÂàªÂêéÈáçËØïÔºåÊàñÊ£ÄÊü•APIÈôêÂà∂ËÆæÁΩÆ');
    } else {
      setStatus('‚ùå Â§ÑÁêÜÂ§±Ë¥•Ôºö' + err.message);
    }
  }
});

function setStatus(t) { $("status").textContent = t; }
function setConclusions(items) {
  const el = $("conclusions");
  el.innerHTML = '';
  items.forEach(t => {
    const li = document.createElement('li');
    li.textContent = t;
    el.appendChild(li);
  });
}

function showDetailedError(message) {
  // Create or update error details section
  let errorDetails = document.getElementById('errorDetails');
  if (!errorDetails) {
    errorDetails = document.createElement('div');
    errorDetails.id = 'errorDetails';
    errorDetails.style.cssText = `
      background: #ffebee;
      border: 1px solid #ffcdd2;
      border-radius: 4px;
      padding: 8px;
      margin: 8px 0;
      font-size: 11px;
      color: #c62828;
      white-space: pre-line;
      max-height: 100px;
      overflow-y: auto;
    `;
    $("status").parentNode.insertBefore(errorDetails, $("status").nextSibling);
  }
  errorDetails.textContent = message;
  errorDetails.style.display = 'block';
  
  // Auto-hide after 10 seconds
  setTimeout(() => {
    if (errorDetails && errorDetails.parentNode) {
      errorDetails.style.display = 'none';
    }
  }, 10000);
}

function clearErrorDetails() {
  const errorDetails = document.getElementById('errorDetails');
  if (errorDetails) {
    errorDetails.style.display = 'none';
  }
}

async function checkServerStatus(apiBase) {
  try {
    const response = await fetch(`${apiBase}/`);
    if (response.ok) {
      const data = await response.json();
      return data;
    }
  } catch (error) {
    console.log('[YT Extension Popup] Server status check failed:', error);
  }
  return null;
}

function showCookiesReminder() {
  const reminderMessage = `üîÑ YouTubeËÆøÈóÆÂèØËÉΩÈúÄË¶ÅÊõ¥Êñ∞

Âª∫ËÆÆÊìç‰ΩúÔºö
‚Ä¢ ËÆøÈóÆ https://youtube.com Âπ∂ÁôªÂΩï
‚Ä¢ Âà∑Êñ∞È°µÈù¢‰ª•Ëé∑ÂèñÊúÄÊñ∞cookies
‚Ä¢ ÊàñËÅîÁ≥ªÁÆ°ÁêÜÂëòÊõ¥Êñ∞cookies.txtÊñá‰ª∂

ÁÇπÂáª"Á°ÆÂÆö"ÁªßÁª≠Â∞ùËØïÔºåÊàñÊ£ÄÊü•ÊúçÂä°Âô®Áä∂ÊÄÅ`;

  if (confirm(reminderMessage)) {
    return true; // Continue with request
  }
  return false; // Cancel request
}

function startProgressMonitoring(apiBase, videoId) {
  console.log('[YT Extension Popup] Starting progress monitoring for:', videoId);
  
  let consecutiveErrors = 0;
  const maxConsecutiveErrors = 3;
  
  // Poll progress every 2 seconds
  const progressInterval = setInterval(async () => {
    try {
      const progressUrl = `${apiBase}/api/progress/${encodeURIComponent(videoId)}`;
      const response = await fetch(progressUrl);
      
      if (response.ok) {
        const progressData = await response.json();
        console.log('[YT Extension Popup] Progress update:', progressData);
        consecutiveErrors = 0; // Reset error counter
        
        // Update status with progress
        if (progressData.status === 'processing') {
          const progressBar = '‚ñà'.repeat(Math.floor(progressData.progress / 10)) + '‚ñë'.repeat(10 - Math.floor(progressData.progress / 10));
          const progressText = `üîÑ ${progressData.current_step}\n${progressBar} ${progressData.progress}%`;
          setStatus(progressText);
        } else if (progressData.status === 'completed') {
          clearInterval(progressInterval);
          console.log('[YT Extension Popup] Progress monitoring completed');
        } else if (progressData.status === 'error') {
          clearInterval(progressInterval);
          setStatus(`‚ùå Â§ÑÁêÜÂá∫Èîô: ${progressData.error}`);
          showDetailedError('Â§ÑÁêÜËøáÁ®ã‰∏≠ÈÅáÂà∞ÈîôËØØÔºåËØ∑Ê£ÄÊü•ËßÜÈ¢ëÈìæÊé•ÊàñÁ®çÂêéÈáçËØï');
        }
      } else if (response.status === 404) {
        // Progress not found - either completed very quickly or cleaned up
        consecutiveErrors++;
        if (consecutiveErrors >= maxConsecutiveErrors) {
          clearInterval(progressInterval);
          console.log('[YT Extension Popup] Progress monitoring stopped - not found');
        }
      }
    } catch (error) {
      console.log('[YT Extension Popup] Progress polling error:', error);
      consecutiveErrors++;
      if (consecutiveErrors >= maxConsecutiveErrors) {
        clearInterval(progressInterval);
        console.log('[YT Extension Popup] Progress monitoring stopped - too many errors');
      }
    }
  }, 1500); // Poll every 1.5 seconds for more responsive UI
  
  // Clean up after 5 minutes max
  setTimeout(() => {
    clearInterval(progressInterval);
    console.log('[YT Extension Popup] Progress monitoring timeout');
  }, 300000);
}

function escapeHtml(str) { return str?.replace(/[&<>"']/g, s => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[s])) || ''; }

// Ëé∑ÂèñÂΩìÂâçÊ¥ªÂä® tab ÁöÑÊúÄÊñ∞ÂÖÉ‰ø°ÊÅØÔºàÂÖºÂÆπ popup ÊâìÂºÄÊó∂Ôºâ
(async function init() {
  const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
  if (!tab?.id) return;
  chrome.tabs.sendMessage(tab.id, { type: 'PING' }, () => {});
})();